//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/BuildRelated/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""MouseOperate"",
            ""id"": ""a1f62b60-c8b0-4921-82d1-c90863a57f20"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""25d2e276-1d29-463b-b9ea-8e8036b8f723"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""562ad811-bf9c-4bce-9d41-d75aa725e330"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a9e759b9-5ce6-41fb-bd49-37caa2a0e626"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""910547c0-109f-4aec-a883-c0221ef451e1"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard And Mouse"",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Touchscreen"",
            ""id"": ""5570213d-7c3c-4f51-9e25-4daad906ab39"",
            ""actions"": [
                {
                    ""name"": ""Touch0Contact"",
                    ""type"": ""Button"",
                    ""id"": ""1c5de36f-5f6c-491e-8fa9-da647359202d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Touch0Position"",
                    ""type"": ""Value"",
                    ""id"": ""49a3f909-2738-4209-8ca4-6e97f5d2e98f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Touch0Delta"",
                    ""type"": ""Value"",
                    ""id"": ""d767c849-3845-4a31-a874-f760891061d3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Touch1Contact"",
                    ""type"": ""Button"",
                    ""id"": ""bdbc4e1a-31ac-4108-b910-13aeaf7b6a0d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Touch1Position"",
                    ""type"": ""Value"",
                    ""id"": ""8c146922-4d5f-41f5-b8c5-070d9922b2a9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Touch1Delta"",
                    ""type"": ""Value"",
                    ""id"": ""90f0da96-d25f-4555-938d-2aa29fefd8bb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2fe14a81-973f-4bde-ac97-61e1bcd74864"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch1Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52bcf45b-9e52-47a2-89ca-ebce38f075b7"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch0Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7ad20a88-dd63-4831-b76f-ddbe973f9ab3"",
                    ""path"": ""<Touchscreen>/touch1/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch1Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6cfef7d3-b7bd-4a8a-acb4-e0b008d6fc18"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch0Contact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""50aa1845-fece-45ea-9f25-d93389aa7ac5"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch1Contact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5aa63fdc-7961-45bd-bd27-15710f8cffca"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch0Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""DualMap"",
            ""id"": ""39ade25a-d00d-4886-a2b6-d51f54501bb8"",
            ""actions"": [
                {
                    ""name"": ""Touch0Contact"",
                    ""type"": ""Button"",
                    ""id"": ""1a3e498a-937b-4ae4-a264-373d9dbd2dd5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Touch0Position"",
                    ""type"": ""Value"",
                    ""id"": ""d0056932-63dd-42f8-884d-f1cead6b2c2b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Touch0Delta"",
                    ""type"": ""Value"",
                    ""id"": ""30d27155-8f99-4b6a-8eb1-e162aef9c267"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Touch1Contact"",
                    ""type"": ""Button"",
                    ""id"": ""c31ada63-36b6-4dab-83b0-b553b80954e4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Touch1Position"",
                    ""type"": ""Value"",
                    ""id"": ""eab868cb-9c01-4580-9375-e223f484ed51"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Touch1Delta"",
                    ""type"": ""Value"",
                    ""id"": ""b242120e-0f4b-42ff-978c-a9ab31dacb74"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""930b3e72-35de-40a9-a88c-488d47de3307"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch1Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f03b1cc0-320f-4f96-87f5-08dce4c7e92a"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch0Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""151fe2d2-4e2d-4ffe-bde7-291cd239ba9e"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch0Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f0c509d8-f074-4c83-ab5b-6bd223be4867"",
                    ""path"": ""<Touchscreen>/touch1/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch1Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f12920a0-348f-40d2-b570-49c1d1b96a11"",
                    ""path"": ""<Touchscreen>/touch0/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch0Contact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""56f4558e-6bfc-4d09-99be-07789427a921"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch0Contact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7fec8c24-15a1-4c24-bcef-5e071b3f7869"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch0Contact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""12c77ddb-74b5-4e83-b08f-c4c81357aba0"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch1Contact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9a06bff3-2466-4399-a5ca-05c00b5b3b4a"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch0Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CameraMap"",
            ""id"": ""6cc00a72-f569-4d7d-9b92-fb6b0ed6850c"",
            ""actions"": [
                {
                    ""name"": ""RotateCamera"",
                    ""type"": ""Value"",
                    ""id"": ""6245fabd-10df-4a77-9c77-8bd0d8885c82"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ZoomCamera"",
                    ""type"": ""Value"",
                    ""id"": ""9bc948c2-d544-41e0-959a-6c23c6b28bf3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""f0a63120-da5e-4b7c-a907-1bc2ce7acc35"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DragCamera"",
                    ""type"": ""Value"",
                    ""id"": ""4091dee4-2846-4896-856c-3e0903e5f3cb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fac80f3b-aed6-4b03-902e-9823f05237a8"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""05491296-b707-4818-94f3-028a7468a5a1"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""ba19d052-9e47-42fc-8dd1-6a25f298ebe0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f7e57327-0948-4785-bda1-92ab9ba155e7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ce26773d-f48f-4f96-bd7c-3052e6825cdd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6f9b6955-8bfb-471d-94bc-e902f980aa7e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""21643407-f286-4370-8afd-525116c060db"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""152857f3-0cc9-48ae-b628-d9d9c96c9d81"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DragCamera"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""5b1cb84f-fb36-47f5-b05e-226101c5e201"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DragCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""888bdac7-1a9a-4516-b9cc-959130415375"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DragCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard And Mouse"",
            ""bindingGroup"": ""Keyboard And Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touchscreen"",
            ""bindingGroup"": ""Touchscreen"",
            ""devices"": []
        }
    ]
}");
        // MouseOperate
        m_MouseOperate = asset.FindActionMap("MouseOperate", throwIfNotFound: true);
        m_MouseOperate_Click = m_MouseOperate.FindAction("Click", throwIfNotFound: true);
        m_MouseOperate_MousePosition = m_MouseOperate.FindAction("MousePosition", throwIfNotFound: true);
        // Touchscreen
        m_Touchscreen = asset.FindActionMap("Touchscreen", throwIfNotFound: true);
        m_Touchscreen_Touch0Contact = m_Touchscreen.FindAction("Touch0Contact", throwIfNotFound: true);
        m_Touchscreen_Touch0Position = m_Touchscreen.FindAction("Touch0Position", throwIfNotFound: true);
        m_Touchscreen_Touch0Delta = m_Touchscreen.FindAction("Touch0Delta", throwIfNotFound: true);
        m_Touchscreen_Touch1Contact = m_Touchscreen.FindAction("Touch1Contact", throwIfNotFound: true);
        m_Touchscreen_Touch1Position = m_Touchscreen.FindAction("Touch1Position", throwIfNotFound: true);
        m_Touchscreen_Touch1Delta = m_Touchscreen.FindAction("Touch1Delta", throwIfNotFound: true);
        // DualMap
        m_DualMap = asset.FindActionMap("DualMap", throwIfNotFound: true);
        m_DualMap_Touch0Contact = m_DualMap.FindAction("Touch0Contact", throwIfNotFound: true);
        m_DualMap_Touch0Position = m_DualMap.FindAction("Touch0Position", throwIfNotFound: true);
        m_DualMap_Touch0Delta = m_DualMap.FindAction("Touch0Delta", throwIfNotFound: true);
        m_DualMap_Touch1Contact = m_DualMap.FindAction("Touch1Contact", throwIfNotFound: true);
        m_DualMap_Touch1Position = m_DualMap.FindAction("Touch1Position", throwIfNotFound: true);
        m_DualMap_Touch1Delta = m_DualMap.FindAction("Touch1Delta", throwIfNotFound: true);
        // CameraMap
        m_CameraMap = asset.FindActionMap("CameraMap", throwIfNotFound: true);
        m_CameraMap_RotateCamera = m_CameraMap.FindAction("RotateCamera", throwIfNotFound: true);
        m_CameraMap_ZoomCamera = m_CameraMap.FindAction("ZoomCamera", throwIfNotFound: true);
        m_CameraMap_Movement = m_CameraMap.FindAction("Movement", throwIfNotFound: true);
        m_CameraMap_DragCamera = m_CameraMap.FindAction("DragCamera", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MouseOperate
    private readonly InputActionMap m_MouseOperate;
    private List<IMouseOperateActions> m_MouseOperateActionsCallbackInterfaces = new List<IMouseOperateActions>();
    private readonly InputAction m_MouseOperate_Click;
    private readonly InputAction m_MouseOperate_MousePosition;
    public struct MouseOperateActions
    {
        private @PlayerInputAction m_Wrapper;
        public MouseOperateActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_MouseOperate_Click;
        public InputAction @MousePosition => m_Wrapper.m_MouseOperate_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_MouseOperate; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseOperateActions set) { return set.Get(); }
        public void AddCallbacks(IMouseOperateActions instance)
        {
            if (instance == null || m_Wrapper.m_MouseOperateActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MouseOperateActionsCallbackInterfaces.Add(instance);
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
        }

        private void UnregisterCallbacks(IMouseOperateActions instance)
        {
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
        }

        public void RemoveCallbacks(IMouseOperateActions instance)
        {
            if (m_Wrapper.m_MouseOperateActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMouseOperateActions instance)
        {
            foreach (var item in m_Wrapper.m_MouseOperateActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MouseOperateActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MouseOperateActions @MouseOperate => new MouseOperateActions(this);

    // Touchscreen
    private readonly InputActionMap m_Touchscreen;
    private List<ITouchscreenActions> m_TouchscreenActionsCallbackInterfaces = new List<ITouchscreenActions>();
    private readonly InputAction m_Touchscreen_Touch0Contact;
    private readonly InputAction m_Touchscreen_Touch0Position;
    private readonly InputAction m_Touchscreen_Touch0Delta;
    private readonly InputAction m_Touchscreen_Touch1Contact;
    private readonly InputAction m_Touchscreen_Touch1Position;
    private readonly InputAction m_Touchscreen_Touch1Delta;
    public struct TouchscreenActions
    {
        private @PlayerInputAction m_Wrapper;
        public TouchscreenActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Touch0Contact => m_Wrapper.m_Touchscreen_Touch0Contact;
        public InputAction @Touch0Position => m_Wrapper.m_Touchscreen_Touch0Position;
        public InputAction @Touch0Delta => m_Wrapper.m_Touchscreen_Touch0Delta;
        public InputAction @Touch1Contact => m_Wrapper.m_Touchscreen_Touch1Contact;
        public InputAction @Touch1Position => m_Wrapper.m_Touchscreen_Touch1Position;
        public InputAction @Touch1Delta => m_Wrapper.m_Touchscreen_Touch1Delta;
        public InputActionMap Get() { return m_Wrapper.m_Touchscreen; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchscreenActions set) { return set.Get(); }
        public void AddCallbacks(ITouchscreenActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchscreenActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchscreenActionsCallbackInterfaces.Add(instance);
            @Touch0Contact.started += instance.OnTouch0Contact;
            @Touch0Contact.performed += instance.OnTouch0Contact;
            @Touch0Contact.canceled += instance.OnTouch0Contact;
            @Touch0Position.started += instance.OnTouch0Position;
            @Touch0Position.performed += instance.OnTouch0Position;
            @Touch0Position.canceled += instance.OnTouch0Position;
            @Touch0Delta.started += instance.OnTouch0Delta;
            @Touch0Delta.performed += instance.OnTouch0Delta;
            @Touch0Delta.canceled += instance.OnTouch0Delta;
            @Touch1Contact.started += instance.OnTouch1Contact;
            @Touch1Contact.performed += instance.OnTouch1Contact;
            @Touch1Contact.canceled += instance.OnTouch1Contact;
            @Touch1Position.started += instance.OnTouch1Position;
            @Touch1Position.performed += instance.OnTouch1Position;
            @Touch1Position.canceled += instance.OnTouch1Position;
            @Touch1Delta.started += instance.OnTouch1Delta;
            @Touch1Delta.performed += instance.OnTouch1Delta;
            @Touch1Delta.canceled += instance.OnTouch1Delta;
        }

        private void UnregisterCallbacks(ITouchscreenActions instance)
        {
            @Touch0Contact.started -= instance.OnTouch0Contact;
            @Touch0Contact.performed -= instance.OnTouch0Contact;
            @Touch0Contact.canceled -= instance.OnTouch0Contact;
            @Touch0Position.started -= instance.OnTouch0Position;
            @Touch0Position.performed -= instance.OnTouch0Position;
            @Touch0Position.canceled -= instance.OnTouch0Position;
            @Touch0Delta.started -= instance.OnTouch0Delta;
            @Touch0Delta.performed -= instance.OnTouch0Delta;
            @Touch0Delta.canceled -= instance.OnTouch0Delta;
            @Touch1Contact.started -= instance.OnTouch1Contact;
            @Touch1Contact.performed -= instance.OnTouch1Contact;
            @Touch1Contact.canceled -= instance.OnTouch1Contact;
            @Touch1Position.started -= instance.OnTouch1Position;
            @Touch1Position.performed -= instance.OnTouch1Position;
            @Touch1Position.canceled -= instance.OnTouch1Position;
            @Touch1Delta.started -= instance.OnTouch1Delta;
            @Touch1Delta.performed -= instance.OnTouch1Delta;
            @Touch1Delta.canceled -= instance.OnTouch1Delta;
        }

        public void RemoveCallbacks(ITouchscreenActions instance)
        {
            if (m_Wrapper.m_TouchscreenActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITouchscreenActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchscreenActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchscreenActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TouchscreenActions @Touchscreen => new TouchscreenActions(this);

    // DualMap
    private readonly InputActionMap m_DualMap;
    private List<IDualMapActions> m_DualMapActionsCallbackInterfaces = new List<IDualMapActions>();
    private readonly InputAction m_DualMap_Touch0Contact;
    private readonly InputAction m_DualMap_Touch0Position;
    private readonly InputAction m_DualMap_Touch0Delta;
    private readonly InputAction m_DualMap_Touch1Contact;
    private readonly InputAction m_DualMap_Touch1Position;
    private readonly InputAction m_DualMap_Touch1Delta;
    public struct DualMapActions
    {
        private @PlayerInputAction m_Wrapper;
        public DualMapActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Touch0Contact => m_Wrapper.m_DualMap_Touch0Contact;
        public InputAction @Touch0Position => m_Wrapper.m_DualMap_Touch0Position;
        public InputAction @Touch0Delta => m_Wrapper.m_DualMap_Touch0Delta;
        public InputAction @Touch1Contact => m_Wrapper.m_DualMap_Touch1Contact;
        public InputAction @Touch1Position => m_Wrapper.m_DualMap_Touch1Position;
        public InputAction @Touch1Delta => m_Wrapper.m_DualMap_Touch1Delta;
        public InputActionMap Get() { return m_Wrapper.m_DualMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DualMapActions set) { return set.Get(); }
        public void AddCallbacks(IDualMapActions instance)
        {
            if (instance == null || m_Wrapper.m_DualMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DualMapActionsCallbackInterfaces.Add(instance);
            @Touch0Contact.started += instance.OnTouch0Contact;
            @Touch0Contact.performed += instance.OnTouch0Contact;
            @Touch0Contact.canceled += instance.OnTouch0Contact;
            @Touch0Position.started += instance.OnTouch0Position;
            @Touch0Position.performed += instance.OnTouch0Position;
            @Touch0Position.canceled += instance.OnTouch0Position;
            @Touch0Delta.started += instance.OnTouch0Delta;
            @Touch0Delta.performed += instance.OnTouch0Delta;
            @Touch0Delta.canceled += instance.OnTouch0Delta;
            @Touch1Contact.started += instance.OnTouch1Contact;
            @Touch1Contact.performed += instance.OnTouch1Contact;
            @Touch1Contact.canceled += instance.OnTouch1Contact;
            @Touch1Position.started += instance.OnTouch1Position;
            @Touch1Position.performed += instance.OnTouch1Position;
            @Touch1Position.canceled += instance.OnTouch1Position;
            @Touch1Delta.started += instance.OnTouch1Delta;
            @Touch1Delta.performed += instance.OnTouch1Delta;
            @Touch1Delta.canceled += instance.OnTouch1Delta;
        }

        private void UnregisterCallbacks(IDualMapActions instance)
        {
            @Touch0Contact.started -= instance.OnTouch0Contact;
            @Touch0Contact.performed -= instance.OnTouch0Contact;
            @Touch0Contact.canceled -= instance.OnTouch0Contact;
            @Touch0Position.started -= instance.OnTouch0Position;
            @Touch0Position.performed -= instance.OnTouch0Position;
            @Touch0Position.canceled -= instance.OnTouch0Position;
            @Touch0Delta.started -= instance.OnTouch0Delta;
            @Touch0Delta.performed -= instance.OnTouch0Delta;
            @Touch0Delta.canceled -= instance.OnTouch0Delta;
            @Touch1Contact.started -= instance.OnTouch1Contact;
            @Touch1Contact.performed -= instance.OnTouch1Contact;
            @Touch1Contact.canceled -= instance.OnTouch1Contact;
            @Touch1Position.started -= instance.OnTouch1Position;
            @Touch1Position.performed -= instance.OnTouch1Position;
            @Touch1Position.canceled -= instance.OnTouch1Position;
            @Touch1Delta.started -= instance.OnTouch1Delta;
            @Touch1Delta.performed -= instance.OnTouch1Delta;
            @Touch1Delta.canceled -= instance.OnTouch1Delta;
        }

        public void RemoveCallbacks(IDualMapActions instance)
        {
            if (m_Wrapper.m_DualMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDualMapActions instance)
        {
            foreach (var item in m_Wrapper.m_DualMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DualMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DualMapActions @DualMap => new DualMapActions(this);

    // CameraMap
    private readonly InputActionMap m_CameraMap;
    private List<ICameraMapActions> m_CameraMapActionsCallbackInterfaces = new List<ICameraMapActions>();
    private readonly InputAction m_CameraMap_RotateCamera;
    private readonly InputAction m_CameraMap_ZoomCamera;
    private readonly InputAction m_CameraMap_Movement;
    private readonly InputAction m_CameraMap_DragCamera;
    public struct CameraMapActions
    {
        private @PlayerInputAction m_Wrapper;
        public CameraMapActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @RotateCamera => m_Wrapper.m_CameraMap_RotateCamera;
        public InputAction @ZoomCamera => m_Wrapper.m_CameraMap_ZoomCamera;
        public InputAction @Movement => m_Wrapper.m_CameraMap_Movement;
        public InputAction @DragCamera => m_Wrapper.m_CameraMap_DragCamera;
        public InputActionMap Get() { return m_Wrapper.m_CameraMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraMapActions set) { return set.Get(); }
        public void AddCallbacks(ICameraMapActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraMapActionsCallbackInterfaces.Add(instance);
            @RotateCamera.started += instance.OnRotateCamera;
            @RotateCamera.performed += instance.OnRotateCamera;
            @RotateCamera.canceled += instance.OnRotateCamera;
            @ZoomCamera.started += instance.OnZoomCamera;
            @ZoomCamera.performed += instance.OnZoomCamera;
            @ZoomCamera.canceled += instance.OnZoomCamera;
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @DragCamera.started += instance.OnDragCamera;
            @DragCamera.performed += instance.OnDragCamera;
            @DragCamera.canceled += instance.OnDragCamera;
        }

        private void UnregisterCallbacks(ICameraMapActions instance)
        {
            @RotateCamera.started -= instance.OnRotateCamera;
            @RotateCamera.performed -= instance.OnRotateCamera;
            @RotateCamera.canceled -= instance.OnRotateCamera;
            @ZoomCamera.started -= instance.OnZoomCamera;
            @ZoomCamera.performed -= instance.OnZoomCamera;
            @ZoomCamera.canceled -= instance.OnZoomCamera;
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @DragCamera.started -= instance.OnDragCamera;
            @DragCamera.performed -= instance.OnDragCamera;
            @DragCamera.canceled -= instance.OnDragCamera;
        }

        public void RemoveCallbacks(ICameraMapActions instance)
        {
            if (m_Wrapper.m_CameraMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraMapActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraMapActions @CameraMap => new CameraMapActions(this);
    private int m_KeyboardAndMouseSchemeIndex = -1;
    public InputControlScheme KeyboardAndMouseScheme
    {
        get
        {
            if (m_KeyboardAndMouseSchemeIndex == -1) m_KeyboardAndMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard And Mouse");
            return asset.controlSchemes[m_KeyboardAndMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchscreenSchemeIndex = -1;
    public InputControlScheme TouchscreenScheme
    {
        get
        {
            if (m_TouchscreenSchemeIndex == -1) m_TouchscreenSchemeIndex = asset.FindControlSchemeIndex("Touchscreen");
            return asset.controlSchemes[m_TouchscreenSchemeIndex];
        }
    }
    public interface IMouseOperateActions
    {
        void OnClick(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
    }
    public interface ITouchscreenActions
    {
        void OnTouch0Contact(InputAction.CallbackContext context);
        void OnTouch0Position(InputAction.CallbackContext context);
        void OnTouch0Delta(InputAction.CallbackContext context);
        void OnTouch1Contact(InputAction.CallbackContext context);
        void OnTouch1Position(InputAction.CallbackContext context);
        void OnTouch1Delta(InputAction.CallbackContext context);
    }
    public interface IDualMapActions
    {
        void OnTouch0Contact(InputAction.CallbackContext context);
        void OnTouch0Position(InputAction.CallbackContext context);
        void OnTouch0Delta(InputAction.CallbackContext context);
        void OnTouch1Contact(InputAction.CallbackContext context);
        void OnTouch1Position(InputAction.CallbackContext context);
        void OnTouch1Delta(InputAction.CallbackContext context);
    }
    public interface ICameraMapActions
    {
        void OnRotateCamera(InputAction.CallbackContext context);
        void OnZoomCamera(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnDragCamera(InputAction.CallbackContext context);
    }
}
